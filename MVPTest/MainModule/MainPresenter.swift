//
//  MainPresenter.swift
//  MVPTest
//
//  Created Bezdenezhnykh Sergey on 16.06.2021.
//  Copyright Â© 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import Foundation


// MARK: MainViewProtocol
protocol MainViewProtocol: AnyObject {
    func outMatchInfo(match: Match)
    func makeButtons(videoLinks: VideoLinks)
    func presentVideo(urlString: String)
}

// MARK: MainPresenterProtocol
protocol MainPresenterProtocol: AnyObject {
    init(view: MainViewProtocol, netService: APIServiceProtocol)
    func viewDidLoad()
    func playVideo(stringUrl: String)
}

final class MainPresenter: MainPresenterProtocol {

    weak var view: MainViewProtocol?
    private var netService: APIServiceProtocol
    
    
    required init(view: MainViewProtocol, netService: APIServiceProtocol) {
        self.view = view
        self.netService = netService
    }

    func viewDidLoad() {
        netService.getMatch { [weak self] result in
            DispatchQueue.main.async { [weak self] in
                switch result {
                case .success(let match):
                    if let match = match {
                        self?.view?.outMatchInfo(match: match)
                    }
                case .failure(let error):
                    print(error.localizedDescription)
                }
            }
        }
        
        netService.getVideo { result in
            DispatchQueue.main.async { [weak self] in
                switch result {
                case .success(let video):
                    if let video = video {
                        self?.view?.makeButtons(videoLinks: video)
                    }
                case .failure(let error):
                    print(error.localizedDescription)
                }
            }
        }
    }
    
    func playVideo(stringUrl: String) {
        view?.presentVideo(urlString: stringUrl)
    }
}
